Description
Imagine a situation: the answer is wrong for the given term, but it is correct for another term. Let's consider situations like this.

You can use maps. Ask all card's definitions in the order of addition. If the definition is wrong for the current term but it is correct for another, output the original term.

When the user tries to add a duplicated term or definition, forbid it and ask again until the user inputs a unique one. For now, you are able to implement this without a try catch construction. Use the rule: if you can avoid exception-based logic, avoid it!

Examples
The symbol > represents the user input. Notice that it's not the part of the input.

Example 1:

Input the number of cards:
> 2
The card #1:
> black
The definition of the card #1:
> white
The card #2:
> black
The card "black" already exists. Try again:
> red
The definition of the card #2:
> white
The definition "white" already exists. Try again:
> green
Print the definition of "black":
> white
Correct answer.
Print the definition of "red":
> green
Correct answer.
Example 2:

Input the number of cards:
> 2
The card #1:
> a brother of one's parent
The definition of the card #1:
> uncle
The card #2:
> a part of the body where the foot and the leg meet
The definition of the card #2:
> ankle
Print the definition of "a brother of one's parent":
> ankle
Wrong answer. The correct one is "uncle", you've just written the definition of "a part of the body where the foot and the leg meet".
Print the definition of "a part of the body where the foot and the leg meet":
> ???
Wrong answer. The correct one is "ankle".
Note that all your outputs and user inputs should be on separate lines.

